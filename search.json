[{"path":"https://mateuspsi.github.io/esemComp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 esemComp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"efa-blocks","dir":"Articles","previous_headings":"","what":"EFA blocks","title":"ESEM-within-CFA","text":"make EFA target rotation, first need specify target rotation matrix. make_target() function facilitates . function work, need indicate mapping factors main loadings, , items expect load heavily factor. information must contained list name item factor name, content numeric vector column number items expect load onto factor. check back dataset factors, see correspondence factor item column number pretty straightforward dataset. first three columns refer items first factor, next three columns items second factor etc. may case dataset! Many scales items related different factors interleaved, leading non-sequential items referring factor. also important remember item number rotation matrix always refers column position item data.frame comprised item data (recall started vignette making separate dataset item data). lowest number always one highest number total number items. NA target rotation matrix indicate loadings shall brought closer zero rotation procedure, zeros indicate otherwise. One can also easily make target roation bifactor model. However, keep non-bifactor model vignette. Now, loading extraction esem_efa() function. need supply data, number factors extracted target rotation matrix. esem_efa() function actually wrapper around psych package function fa() exploratory factor analysis. controls can supplied finer specification factor extraction procedure. Just sure always input arguments original function name = value pairs. sure check fa()’s documentation information controls information fields inside output object. default, target rotation used oblique one. user can switch orthogonal target rotation setting targetAlgorithm parameter TargetT. alternative drop use target rotation altogether use Geomin rotation instead. case, just leave target parameter alone. One last possible use available case bifactor models. case, just set bifactor = TRUE. Currently, bifactor models available target rotation. code cases commented . able factor analyses ESEM blocks nice, still lacks great flexibility extensibility present CFA/SEM models. access features, use ESEM-within-CFA approach next.","code":"# list with mapping between factors and items main_loadings_list <- list(visual = c(1:3),                            textual = c(4:6),                            speed = c(7:9)) target_rot <- make_target(nitems = 9, mainloadings = main_loadings_list) target_rot #>       visual textual speed #>  [1,]     NA       0     0 #>  [2,]     NA       0     0 #>  [3,]     NA       0     0 #>  [4,]      0      NA     0 #>  [5,]      0      NA     0 #>  [6,]      0      NA     0 #>  [7,]      0       0    NA #>  [8,]      0       0    NA #>  [9,]      0       0    NA bifactor_target_rot <- make_target(nitems = 9,                                   mainloadings = main_loadings_list,                                   bifactor = TRUE) bifactor_target_rot #>       visual textual speed  G #>  [1,]     NA       0     0 NA #>  [2,]     NA       0     0 NA #>  [3,]     NA       0     0 NA #>  [4,]      0      NA     0 NA #>  [5,]      0      NA     0 NA #>  [6,]      0      NA     0 NA #>  [7,]      0       0    NA NA #>  [8,]      0       0    NA NA #>  [9,]      0       0    NA NA # Specify the efa block. # Note that if we continued with the bifactor model 'nfactors' would then be specified as 4 and not 3 due to the G factor being added  efa_block <- esem_efa(data = hw_data,                       nfactors = 3,                       target = target_rot) #> Loading required namespace: GPArotation efa_block #> Factor Analysis using method =  pa #> Call: psych::fa(r = data, nfactors = nfactors, rotate = targetAlgorithm,  #>     fm = fm, Target = target) #> Standardized loadings (pattern matrix) based upon correlation matrix #>      PA2   PA3   PA1   h2   u2 com #> x1  0.18  0.08  0.58 0.48 0.52 1.2 #> x2  0.03 -0.09  0.52 0.26 0.74 1.1 #> x3 -0.08  0.08  0.67 0.45 0.55 1.1 #> x4  0.85  0.01  0.02 0.73 0.27 1.0 #> x5  0.89  0.00 -0.06 0.75 0.25 1.0 #> x6  0.80 -0.01  0.08 0.69 0.31 1.0 #> x7  0.04  0.75 -0.24 0.51 0.49 1.2 #> x8 -0.05  0.72  0.03 0.52 0.48 1.0 #> x9  0.01  0.50  0.32 0.46 0.54 1.7 #>  #>                        PA2  PA3  PA1 #> SS loadings           2.22 1.38 1.26 #> Proportion Var        0.25 0.15 0.14 #> Cumulative Var        0.25 0.40 0.54 #> Proportion Explained  0.46 0.28 0.26 #> Cumulative Proportion 0.46 0.74 1.00 #>  #>  With factor correlations of  #>      PA2  PA3  PA1 #> PA2 1.00 0.26 0.34 #> PA3 0.26 1.00 0.31 #> PA1 0.34 0.31 1.00 #>  #> Mean item complexity =  1.1 #> Test of the hypothesis that 3 factors are sufficient. #>  #> The degrees of freedom for the null model are  36  and the objective function was  3.05 with Chi Square of  904.1 #> The degrees of freedom for the model are 12  and the objective function was  0.08  #>  #> The root mean square of the residuals (RMSR) is  0.02  #> The df corrected root mean square of the residuals is  0.03  #>  #> The harmonic number of observations is  301 with the empirical chi square  7.87  with prob <  0.8  #> The total number of observations was  301  with Likelihood Chi Square =  22.54  with prob <  0.032  #>  #> Tucker Lewis Index of factoring reliability =  0.963 #> RMSEA index =  0.054  and the 90 % confidence intervals are  0.016 0.088 #> BIC =  -45.95 #> Fit based upon off diagonal values = 1 #> Measures of factor score adequacy              #>                                                    PA2  PA3  PA1 #> Correlation of (regression) scores with factors   0.94 0.86 0.84 #> Multiple R square of scores with factors          0.89 0.74 0.70 #> Minimum correlation of possible factor scores     0.78 0.48 0.40 # orthogonal target rotation # esem_efa(data = hw_data, #          nfactors = 3, #          target = target_rot, #          targetAlgorithm = \"TargetT\")  # geomin rotation # esem_efa(data = hw_data, #          nfactors = 3)  # bifactor model # esem_efa(data = hw_data, #          nfactors = 4, #          target = bifactor_target_rot, #          bifactor = TRUE)"},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"esem-within-cfa","dir":"Articles","previous_headings":"","what":"ESEM-within-CFA","title":"ESEM-within-CFA","text":"possession EFA done ESEM approach, need just use syntax_composer() function “compose” ESEM-within-CFA model lavaan’s syntax. , syntax, run lavaan fit. syntax_composer() takes first argument EFA solution, second argument named list indicating referents factor. entry list form factor = \"item_name\". Importantly, list must order factors appear factor loadings matrix EFA solution. Usually, order used list create target rotation, EFA matrix factors ordered amount variance explained, order supply. instance, checking loadings can infer order factor loadings matrix example “textual, speed, visual”. order used make_target()(“visual, textual, speed”). checking loadings matrix can also pick best referent factor. always item loads heavily one factor poorly others. , factor “textual” referent x5, speed x8 visual x3. create list order. Alternatively, possible use find_referents() function automated selection referents. inputs result esem_efa()function character vector desired names factors. , names must refer factors order appear exploratory solution. noted referents chosen function exactly ones chose inspecting factor loadings, referent speed differs. happens current implementation find_referents() searches highest loading item factor, regard well item loads factors. Finally, compose lavaan syntax syntax_composer: Laavan’s model syntaxes nothing (often) long string. best way see resulting syntax writeLines(): can confirm factor two fixed parameters (cross-loadings factors) parameters loadings EFA starting points. ready run CFA lavaan syntax. Alternatively, can simply copy syntax run model lavaan-powered point--click software like JASP JAMOVI (SEM module). Just sure check using parametrization corresponds syntax composed. need fit model free factor (residual) variances ’ll need use function fit_free_factor_var_esem(). function wrapper around lavaan() function parameters set cfa() function, except factor variances free estimated first indicators factor automatically fixed. assume identification granted fixed referents model syntax, case set only_fix_crossloadings = FALSE composing syntax syntax_composer.","code":"efa_block$loadings #>  #> Loadings: #>    PA2    PA3    PA1    #> x1  0.179         0.577 #> x2                0.515 #> x3                0.670 #> x4  0.845               #> x5  0.886               #> x6  0.803               #> x7         0.745 -0.240 #> x8         0.724        #> x9         0.504  0.317 #>  #>                  PA2   PA3   PA1 #> SS loadings    2.189 1.354 1.218 #> Proportion Var 0.243 0.150 0.135 #> Cumulative Var 0.243 0.394 0.529 # create named character vector of referents hw_referents <- list(textual = \"x5\",                      speed = \"x8\",                      visual = \"x3\") find_referents(efa_block, c(\"textual\", \"speed\", \"visual\")) #> $textual #> [1] \"x5\" #>  #> $speed #> [1] \"x7\" #>  #> $visual #> [1] \"x3\" # compose lavaan syntax model_syntax <- syntax_composer(efa_object = efa_block,                                 referents = hw_referents)  # altenatively, if you plan fit the model with free factor variance parameters #model_syntax_free_var <- syntax_composer(efa_object = efa_block, #                                referents = hw_referents, #                                only_fix_crossloadings = FALSE) writeLines(model_syntax) #> textual =~ start(0.179)*x1+ #> start(0.03)*x2+ #> -0.082*x3+ #> start(0.845)*x4+ #> start(0.886)*x5+ #> start(0.803)*x6+ #> start(0.037)*x7+ #> -0.049*x8+ #> start(0.014)*x9  #>  #> speed =~ start(0.081)*x1+ #> start(-0.085)*x2+ #> 0.075*x3+ #> start(0.01)*x4+ #> 0.003*x5+ #> start(-0.006)*x6+ #> start(0.745)*x7+ #> start(0.724)*x8+ #> start(0.504)*x9  #>  #> visual =~ start(0.577)*x1+ #> start(0.515)*x2+ #> start(0.67)*x3+ #> start(0.016)*x4+ #> -0.064*x5+ #> start(0.08)*x6+ #> start(-0.24)*x7+ #> 0.035*x8+ #> start(0.317)*x9 cfa_fit <- lavaan::cfa(model = model_syntax, data = hw_data, std.lv =T) lavaan::summary(cfa_fit, fit.measures = TRUE, std = TRUE) #> lavaan 0.6-10 ended normally after 28 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        33 #>                                                        #>   Number of observations                           301 #>                                                        #> Model Test User Model: #>                                                        #>   Test statistic                                22.897 #>   Degrees of freedom                                12 #>   P-value (Chi-square)                           0.029 #>  #> Model Test Baseline Model: #>  #>   Test statistic                               918.852 #>   Degrees of freedom                                36 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.988 #>   Tucker-Lewis Index (TLI)                       0.963 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -3706.541 #>   Loglikelihood unrestricted model (H1)      -3695.092 #>                                                        #>   Akaike (AIC)                                7479.081 #>   Bayesian (BIC)                              7601.416 #>   Sample-size adjusted Bayesian (BIC)         7496.758 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.055 #>   90 Percent confidence interval - lower         0.017 #>   90 Percent confidence interval - upper         0.089 #>   P-value RMSEA <= 0.05                          0.365 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.017 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   textual =~                                                             #>     x1                0.218    0.080    2.728    0.006    0.218    0.187 #>     x2                0.052    0.084    0.611    0.541    0.052    0.044 #>     x3               -0.082                              -0.082   -0.073 #>     x4                0.971    0.062   15.657    0.000    0.971    0.836 #>     x5                1.138    0.063   18.018    0.000    1.138    0.883 #>     x6                0.878    0.058   15.034    0.000    0.878    0.803 #>     x7                0.030    0.078    0.391    0.696    0.030    0.028 #>     x8               -0.049                              -0.049   -0.048 #>     x9                0.023    0.064    0.359    0.720    0.023    0.023 #>   speed =~                                                               #>     x1                0.080    0.087    0.917    0.359    0.080    0.069 #>     x2               -0.105    0.093   -1.128    0.259   -0.105   -0.089 #>     x3                0.075                               0.075    0.066 #>     x4                0.006    0.062    0.104    0.917    0.006    0.006 #>     x5                0.003                               0.003    0.002 #>     x6               -0.008    0.060   -0.139    0.889   -0.008   -0.008 #>     x7                0.800    0.098    8.140    0.000    0.800    0.736 #>     x8                0.737    0.069   10.647    0.000    0.737    0.729 #>     x9                0.503    0.068    7.394    0.000    0.503    0.500 #>   visual =~                                                              #>     x1                0.689    0.088    7.834    0.000    0.689    0.591 #>     x2                0.597    0.093    6.413    0.000    0.597    0.508 #>     x3                0.759    0.077    9.829    0.000    0.759    0.672 #>     x4                0.043    0.067    0.646    0.518    0.043    0.037 #>     x5               -0.064                              -0.064   -0.050 #>     x6                0.101    0.063    1.605    0.109    0.101    0.093 #>     x7               -0.236    0.100   -2.355    0.019   -0.236   -0.217 #>     x8                0.035                               0.035    0.035 #>     x9                0.318    0.072    4.384    0.000    0.318    0.315 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   textual ~~                                                             #>     speed             0.258    0.087    2.977    0.003    0.258    0.258 #>     visual            0.303    0.092    3.307    0.001    0.303    0.303 #>   speed ~~                                                               #>     visual            0.307    0.115    2.670    0.008    0.307    0.307 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .x1                0.696    0.087    8.038    0.000    0.696    0.513 #>    .x2                1.035    0.102   10.151    0.000    1.035    0.749 #>    .x3                0.692    0.097    7.134    0.000    0.692    0.543 #>    .x4                0.377    0.048    7.902    0.000    0.377    0.279 #>    .x5                0.403    0.061    6.590    0.000    0.403    0.243 #>    .x6                0.365    0.042    8.613    0.000    0.365    0.305 #>    .x7                0.594    0.106    5.624    0.000    0.594    0.502 #>    .x8                0.479    0.080    5.958    0.000    0.479    0.469 #>    .x9                0.551    0.060    9.132    0.000    0.551    0.543 #>     textual           1.000                               1.000    1.000 #>     speed             1.000                               1.000    1.000 #>     visual            1.000                               1.000    1.000 # cfa_fit <- fit_free_factor_var_esem(model_syntax_free_var, hw_data) # lavaan::summary(cfa_fit, fit.measures = TRUE, std = TRUE)"},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"mcdonalds-omega","dir":"Articles","previous_headings":"","what":"McDonald’s Omega","title":"ESEM-within-CFA","text":"can calculate McDonald’s omegas using fitted model target rotation matrix. Currently, use target rotation matrix mandatory.","code":"omega_esem(cfa_fit, target_rot) #>  visual textual   speed  #>   0.635   0.885   0.718"},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"extending-the-model","dir":"Articles","previous_headings":"","what":"Extending the model","title":"ESEM-within-CFA","text":"modify extend model just need add information model syntax already . Let’s say want estimate residual covariance two items, : formula paste(model_syntax, mod_extension, sep = \"\\n\") can used iteratively progressively add extensions model, one can write several extensions quotes add model one go. extending model, new syntax can used fit new model lavaan’s cfa() sem() (extensions include regressions). Check lavaan’s lavaanify() documentation learn syntaxes model extension (covariances, regressions much ).","code":"# lavaan syntax for \"x3 covariates with x4\" mod_extension <- \"x3 ~~ x4\" extended_model_syntax <- paste(model_syntax, mod_extension, sep = \"\\n\") writeLines(extended_model_syntax) #> textual =~ start(0.179)*x1+ #> start(0.03)*x2+ #> -0.082*x3+ #> start(0.845)*x4+ #> start(0.886)*x5+ #> start(0.803)*x6+ #> start(0.037)*x7+ #> -0.049*x8+ #> start(0.014)*x9  #>  #> speed =~ start(0.081)*x1+ #> start(-0.085)*x2+ #> 0.075*x3+ #> start(0.01)*x4+ #> 0.003*x5+ #> start(-0.006)*x6+ #> start(0.745)*x7+ #> start(0.724)*x8+ #> start(0.504)*x9  #>  #> visual =~ start(0.577)*x1+ #> start(0.515)*x2+ #> start(0.67)*x3+ #> start(0.016)*x4+ #> -0.064*x5+ #> start(0.08)*x6+ #> start(-0.24)*x7+ #> 0.035*x8+ #> start(0.317)*x9  #>  #> x3 ~~ x4 extended_cfa_fit <- lavaan::cfa(extended_model_syntax, hw_data, std.lv = T) lavaan::summary(extended_cfa_fit, fit.measures = TRUE, std = TRUE) #> lavaan 0.6-10 ended normally after 28 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        34 #>                                                        #>   Number of observations                           301 #>                                                        #> Model Test User Model: #>                                                        #>   Test statistic                                22.535 #>   Degrees of freedom                                11 #>   P-value (Chi-square)                           0.021 #>  #> Model Test Baseline Model: #>  #>   Test statistic                               918.852 #>   Degrees of freedom                                36 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    0.987 #>   Tucker-Lewis Index (TLI)                       0.957 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)              -3706.360 #>   Loglikelihood unrestricted model (H1)      -3695.092 #>                                                        #>   Akaike (AIC)                                7480.719 #>   Bayesian (BIC)                              7606.761 #>   Sample-size adjusted Bayesian (BIC)         7498.933 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.059 #>   90 Percent confidence interval - lower         0.022 #>   90 Percent confidence interval - upper         0.094 #>   P-value RMSEA <= 0.05                          0.297 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.017 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   textual =~                                                             #>     x1                0.229    0.081    2.838    0.005    0.229    0.196 #>     x2                0.059    0.085    0.692    0.489    0.059    0.050 #>     x3               -0.082                              -0.082   -0.073 #>     x4                0.978    0.063   15.556    0.000    0.978    0.841 #>     x5                1.136    0.063   17.951    0.000    1.136    0.882 #>     x6                0.879    0.058   15.098    0.000    0.879    0.804 #>     x7                0.027    0.079    0.346    0.729    0.027    0.025 #>     x8               -0.049                              -0.049   -0.048 #>     x9                0.027    0.064    0.416    0.677    0.027    0.026 #>   speed =~                                                               #>     x1                0.079    0.087    0.909    0.363    0.079    0.068 #>     x2               -0.108    0.093   -1.164    0.244   -0.108   -0.092 #>     x3                0.075                               0.075    0.066 #>     x4                0.012    0.062    0.192    0.848    0.012    0.010 #>     x5                0.003                               0.003    0.002 #>     x6               -0.008    0.060   -0.132    0.895   -0.008   -0.007 #>     x7                0.809    0.100    8.123    0.000    0.809    0.744 #>     x8                0.734    0.069   10.650    0.000    0.734    0.726 #>     x9                0.503    0.068    7.388    0.000    0.503    0.499 #>   visual =~                                                              #>     x1                0.680    0.088    7.768    0.000    0.680    0.584 #>     x2                0.598    0.093    6.429    0.000    0.598    0.509 #>     x3                0.759    0.077    9.819    0.000    0.759    0.672 #>     x4                0.022    0.074    0.302    0.763    0.022    0.019 #>     x5               -0.064                              -0.064   -0.050 #>     x6                0.100    0.063    1.584    0.113    0.100    0.091 #>     x7               -0.247    0.101   -2.438    0.015   -0.247   -0.227 #>     x8                0.035                               0.035    0.035 #>     x9                0.316    0.072    4.360    0.000    0.316    0.314 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>  .x3 ~~                                                                  #>    .x4                0.028    0.046    0.611    0.541    0.028    0.056 #>   textual ~~                                                             #>     speed             0.260    0.087    2.980    0.003    0.260    0.260 #>     visual            0.297    0.092    3.214    0.001    0.297    0.297 #>   speed ~~                                                               #>     visual            0.313    0.115    2.722    0.006    0.313    0.313 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .x1                0.701    0.086    8.112    0.000    0.701    0.516 #>    .x2                1.031    0.102   10.127    0.000    1.031    0.746 #>    .x3                0.691    0.097    7.105    0.000    0.691    0.542 #>    .x4                0.375    0.048    7.778    0.000    0.375    0.277 #>    .x5                0.407    0.061    6.634    0.000    0.407    0.245 #>    .x6                0.366    0.042    8.614    0.000    0.366    0.306 #>    .x7                0.585    0.107    5.474    0.000    0.585    0.494 #>    .x8                0.483    0.080    6.071    0.000    0.483    0.473 #>    .x9                0.550    0.060    9.126    0.000    0.550    0.542 #>     textual           1.000                               1.000    1.000 #>     speed             1.000                               1.000    1.000 #>     visual            1.000                               1.000    1.000"},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"export-results","dir":"Articles","previous_headings":"","what":"Export results","title":"ESEM-within-CFA","text":"Result information summary() may exported text file export_lavaan_results() function. possible add preamble enrich information output. Since function runs lavaan’s summary() dumping results, one can add extra results modification indices r-squared measures including corresponding modifiers call (possible modifiers listed lavaan’s lavaan-class help). saves “lavaan_summary.txt” file current working directory preamble my_preamble top. also added rsquare modifier ensure shows results. wished save file somewhere else pass full path path_name, something like “C:/directory_one/another_directory/my_desired_file_name.txt”. Irrespective operating system path must written forward /, backward, slashes. path must end file name text extension.","code":"my_preamble <- ' ESEM on the classic Holtzinger Swineford data.  Referents chosen after target rotate EFA with  Principal Axis extraction. '  export_lavaan_results(extended_cfa_fit, preamble = my_preamble, rsquare = TRUE)"},{"path":"https://mateuspsi.github.io/esemComp/articles/esem-within-cfa.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"ESEM-within-CFA","text":"Asparouhov, Tihomir, Bengt Muthén. 2009. “Exploratory Structural Equation Modeling.” Structural Equation Modeling: Multidisciplinary Journal 16 (3): 397–438. https://doi.org/10.1080/10705510903008204. Marsh, Herbert W., Alexandre J. S. Morin, Philip D. Parker, Gurvinder Kaur. 2014. “Exploratory Structural Equation Modeling: Integration Best Features Exploratory Confirmatory Factor Analysis.” Annu. Rev. Clin. Psychol. 10 (1): 85–110. https://doi.org/10.1146/annurev-clinpsy-032813-153700.","code":""},{"path":"https://mateuspsi.github.io/esemComp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mateus Silvestrin. Author, maintainer. Leon T. de Beer. Author.            WorkWell Research Unit, North-West University","code":""},{"path":"https://mateuspsi.github.io/esemComp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silvestrin M, T. de Beer L (2022). esemComp: ESEM-within-CFA syntax composer. R package version 0.2, https://mateuspsi.github.io/esemComp.","code":"@Manual{,   title = {esemComp: ESEM-within-CFA syntax composer},   author = {Mateus Silvestrin and Leon {T. de Beer}},   year = {2022},   note = {R package version 0.2},   url = {https://mateuspsi.github.io/esemComp}, }"},{"path":"https://mateuspsi.github.io/esemComp/index.html","id":"esemcomp","dir":"","previous_headings":"","what":"ESEM-within-CFA syntax composer","title":"ESEM-within-CFA syntax composer","text":"esemComp helps composing ESEM-within-CFA syntaxes run lavaan. helper functions create target rotation matrices run (ESEM-like) exploratory factor analyses.","code":""},{"path":"https://mateuspsi.github.io/esemComp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ESEM-within-CFA syntax composer","text":"can install esemComp GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"MateusPsi/esemComp\", build_vignettes = TRUE)"},{"path":"https://mateuspsi.github.io/esemComp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"ESEM-within-CFA syntax composer","text":"basic usage package follows steps: make target rotation matrix (optional) > exploratory factor analysis > compose syntax > run model lavaan > export results (optional). sure check esem-within-cfa vignette comprehensive display package logic capabilities: Bug reports, feature requests contributions welcome! Get touch github email.","code":"library(esemComp) # use Holzinger and Swineford (1939) dataset in lavaan package hw_data <- lavaan::HolzingerSwineford1939 hw_data <- hw_data[,c(7:15)]  #make exploratory analysis with geomin rotation geomin_efa <- esem_efa(hw_data,3) #> Loading required namespace: GPArotation referents_list <- list(textual = \"x5\", visual = \"x3\", speed = \"x7\") model_syntax <- syntax_composer(geomin_efa, referents_list) writeLines(model_syntax) #> textual =~ start(0.193)*x1+ #> start(0.042)*x2+ #> -0.066*x3+ #> start(0.845)*x4+ #> start(0.884)*x5+ #> start(0.804)*x6+ #> 0.035*x7+ #> start(-0.044)*x8+ #> start(0.024)*x9  #>  #> visual =~ start(0.595)*x1+ #> start(0.509)*x2+ #> start(0.688)*x3+ #> start(0.02)*x4+ #> -0.061*x5+ #> start(0.083)*x6+ #> -0.137*x7+ #> start(0.137)*x8+ #> start(0.391)*x9  #>  #> speed =~ start(0.029)*x1+ #> start(-0.124)*x2+ #> 0.016*x3+ #> start(0.009)*x4+ #> 0.009*x5+ #> start(-0.011)*x6+ #> start(0.731)*x7+ #> start(0.688)*x8+ #> start(0.455)*x9  # esem-within-cfa esem_w_cfa <- lavaan::cfa(model_syntax, data = hw_data, std.lv = TRUE) # save results to a text file export_lavaan_results(esem_w_cfa) library(esemComp) vignette(\"esem-within-cfa\")"},{"path":"https://mateuspsi.github.io/esemComp/reference/esemComp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"esemComp: ESEM-within-CFA syntax composer — esemComp-package","title":"esemComp: ESEM-within-CFA syntax composer — esemComp-package","text":"Functions compose ESEM-within-CFA models run lavaan.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esemComp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"esemComp: ESEM-within-CFA syntax composer — esemComp-package","text":"Maintainer: Mateus Silvestrin mateusilvestrin@gmail.com (ORCID) Authors: Leon T. de Beer 12848417@g.nwu.ac.za (ORCID) (WorkWell Research Unit, North-West University)","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":null,"dir":"Reference","previous_headings":"","what":"ESEM EFA — esem_efa","title":"ESEM EFA — esem_efa","text":"Wrapper around psych::fa() running ESEM-like exploratory factor analysis.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESEM EFA — esem_efa","text":"","code":"esem_efa(   data,   nfactors,   target = \"none\",   bifactor = FALSE,   fm = \"pa\",   targetAlgorithm = \"targetQ\",   ... )"},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESEM EFA — esem_efa","text":"data Raw data.frame matrix. Subjects x Items data item covariance matrix. nfactors integer. Number factors extract (including G bifactor). target Target rotation matrix. Usually obtained make_target(). Defaults \"none\", case geominQ rotation used. bifactor Logical. Set TRUE model bifactor. fm Factor extraction method. Defaults \"Principal Axis\", see psych::fa() alternatives. targetAlgorithm Character vector. Factor rotation use target matrix. Defaults oblique target rotation (\"targetQ\"). alternative \"TargetT\", orthogonal target rotation. Automatically set orthogonal target rotation bifactor = TRUE. ... Additional parameters passed psych::fa().","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESEM EFA — esem_efa","text":"psych::fa() object factor extraction results.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ESEM EFA — esem_efa","text":"Facilitates ESEM-like exploratory factor analyses. simplest case, (oblique) Geomin rotation used factor extraction. user can control value Geomin delta (aka epsilon literature) specifying desired number (usually 0.1 0.9) delta ... (see examples). run factor extraction target rotation, target rotation matrix (items x factors) must supplied target. Matrix cells show zeros loadings expected close zero possible NA loadings freely estimated. One can create matrix hand base::matrix(), check helping function make_target() included package. default target rotation oblique, can changed orthogonal alternative setting targetAlgorithm = \"TargetT\". run factor extraction bifactor target rotation, bifactor target rotation matrix must supplied target bifactor set TRUE.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/esem_efa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESEM EFA — esem_efa","text":"","code":"#use Tucker 9 cognitive variables cov matrix tucker <- psych::Tucker  # esem with Geomin rotation esem_efa(tucker, 2) #> Loading required namespace: GPArotation #> Factor Analysis using method =  pa #> Call: psych::fa(r = data, nfactors = nfactors, rotate = \"geominQ\",  #>     fm = fm) #> Standardized loadings (pattern matrix) based upon correlation matrix #>       PA1   PA2   h2   u2 com #> t42 -0.03  0.70 0.48 0.52 1.0 #> t54  0.02  0.71 0.51 0.49 1.0 #> t45  0.91 -0.03 0.81 0.19 1.0 #> t46  0.86 -0.06 0.71 0.29 1.0 #> t23 -0.01  0.71 0.50 0.50 1.0 #> t24  0.00  0.74 0.55 0.45 1.0 #> t27  0.12  0.59 0.42 0.58 1.1 #> t10  0.76  0.13 0.68 0.32 1.1 #> t51  0.78  0.06 0.65 0.35 1.0 #>  #>                        PA1  PA2 #> SS loadings           2.84 2.47 #> Proportion Var        0.32 0.27 #> Cumulative Var        0.32 0.59 #> Proportion Explained  0.53 0.47 #> Cumulative Proportion 0.53 1.00 #>  #>  With factor correlations of  #>      PA1  PA2 #> PA1 1.00 0.42 #> PA2 0.42 1.00 #>  #> Mean item complexity =  1 #> Test of the hypothesis that 2 factors are sufficient. #>  #> The degrees of freedom for the null model are  36  and the objective function was  4.49 #> The degrees of freedom for the model are 19  and the objective function was  0.07  #>  #> The root mean square of the residuals (RMSR) is  0.02  #> The df corrected root mean square of the residuals is  0.03  #>  #> Fit based upon off diagonal values = 1 #> Measures of factor score adequacy              #>                                                    PA1  PA2 #> Correlation of (regression) scores with factors   0.96 0.91 #> Multiple R square of scores with factors          0.92 0.83 #> Minimum correlation of possible factor scores     0.83 0.67 # esem with Geomin rotation setting the rotation delta (aka epsilon) esem_efa(tucker, 2, delta = .5) #> Factor Analysis using method =  pa #> Call: psych::fa(r = data, nfactors = nfactors, rotate = \"geominQ\",  #>     fm = fm, delta = 0.5) #> Standardized loadings (pattern matrix) based upon correlation matrix #>      PA1  PA2   h2   u2 com #> t42 0.03 0.68 0.48 0.52 1.0 #> t54 0.08 0.69 0.51 0.49 1.0 #> t45 0.89 0.03 0.81 0.19 1.0 #> t46 0.84 0.00 0.71 0.29 1.0 #> t23 0.05 0.69 0.50 0.50 1.0 #> t24 0.06 0.72 0.55 0.45 1.0 #> t27 0.16 0.58 0.42 0.58 1.2 #> t10 0.76 0.17 0.68 0.32 1.1 #> t51 0.77 0.10 0.65 0.35 1.0 #>  #>                        PA1  PA2 #> SS loadings           2.86 2.45 #> Proportion Var        0.32 0.27 #> Cumulative Var        0.32 0.59 #> Proportion Explained  0.54 0.46 #> Cumulative Proportion 0.54 1.00 #>  #>  With factor correlations of  #>      PA1  PA2 #> PA1 1.00 0.29 #> PA2 0.29 1.00 #>  #> Mean item complexity =  1 #> Test of the hypothesis that 2 factors are sufficient. #>  #> The degrees of freedom for the null model are  36  and the objective function was  4.49 #> The degrees of freedom for the model are 19  and the objective function was  0.07  #>  #> The root mean square of the residuals (RMSR) is  0.02  #> The df corrected root mean square of the residuals is  0.03  #>  #> Fit based upon off diagonal values = 1 #> Measures of factor score adequacy              #>                                                    PA1  PA2 #> Correlation of (regression) scores with factors   0.95 0.91 #> Multiple R square of scores with factors          0.91 0.82 #> Minimum correlation of possible factor scores     0.82 0.65  # esem with oblique target rotation target_mat <- make_target(9, list(f1 = c(1,2,5:7), f2 = c(3,4,8,9))) esem_efa(tucker,2,target_mat) #> Factor Analysis using method =  pa #> Call: psych::fa(r = data, nfactors = nfactors, rotate = targetAlgorithm,  #>     fm = fm, Target = target) #> Standardized loadings (pattern matrix) based upon correlation matrix #>       PA2   PA1   h2   u2 com #> t42 -0.05  0.71 0.48 0.52 1.0 #> t54  0.01  0.71 0.51 0.49 1.0 #> t45  0.92 -0.05 0.81 0.19 1.0 #> t46  0.87 -0.08 0.71 0.29 1.0 #> t23 -0.03  0.72 0.50 0.50 1.0 #> t24 -0.01  0.74 0.55 0.45 1.0 #> t27  0.11  0.59 0.42 0.58 1.1 #> t10  0.76  0.12 0.68 0.32 1.0 #> t51  0.79  0.04 0.65 0.35 1.0 #>  #>                        PA2  PA1 #> SS loadings           2.85 2.46 #> Proportion Var        0.32 0.27 #> Cumulative Var        0.32 0.59 #> Proportion Explained  0.54 0.46 #> Cumulative Proportion 0.54 1.00 #>  #>  With factor correlations of  #>      PA2  PA1 #> PA2 1.00 0.45 #> PA1 0.45 1.00 #>  #> Mean item complexity =  1 #> Test of the hypothesis that 2 factors are sufficient. #>  #> The degrees of freedom for the null model are  36  and the objective function was  4.49 #> The degrees of freedom for the model are 19  and the objective function was  0.07  #>  #> The root mean square of the residuals (RMSR) is  0.02  #> The df corrected root mean square of the residuals is  0.03  #>  #> Fit based upon off diagonal values = 1 #> Measures of factor score adequacy              #>                                                    PA2  PA1 #> Correlation of (regression) scores with factors   0.96 0.92 #> Multiple R square of scores with factors          0.92 0.84 #> Minimum correlation of possible factor scores     0.83 0.68 # esem with bifactor target rotation bifactor_target_mat <- make_target(9, list(f1 = c(1,2,5:7), f2 = c(3,4,8,9)), TRUE) esem_efa(tucker,3,bifactor_target_mat, maxit = 2000) #maxit needed for convergence #> Factor Analysis using method =  pa #> Call: psych::fa(r = data, nfactors = nfactors, rotate = targetAlgorithm,  #>     fm = fm, Target = target, maxit = 2000) #> Standardized loadings (pattern matrix) based upon correlation matrix #>      PA3   PA2   PA1   h2   u2 com #> t42 0.56 -0.02  0.44 0.51 0.49 1.9 #> t54 0.57  0.03  0.53 0.61 0.39 2.0 #> t45 0.36  0.83  0.03 0.82 0.18 1.4 #> t46 0.35  0.77 -0.07 0.71 0.29 1.4 #> t23 0.73 -0.06  0.13 0.55 0.45 1.1 #> t24 0.67 -0.01  0.29 0.53 0.47 1.4 #> t27 0.70  0.06  0.04 0.49 0.51 1.0 #> t10 0.48  0.67 -0.02 0.68 0.32 1.8 #> t51 0.38  0.71  0.06 0.66 0.34 1.5 #>  #>                        PA3  PA2  PA1 #> SS loadings           2.73 2.24 0.59 #> Proportion Var        0.30 0.25 0.07 #> Cumulative Var        0.30 0.55 0.62 #> Proportion Explained  0.49 0.40 0.11 #> Cumulative Proportion 0.49 0.89 1.00 #>  #>  With factor correlations of  #>     PA3  PA2  PA1 #> PA3   1 0.00 0.00 #> PA2   0 1.00 0.09 #> PA1   0 0.09 1.00 #>  #> Mean item complexity =  1.5 #> Test of the hypothesis that 3 factors are sufficient. #>  #> The degrees of freedom for the null model are  36  and the objective function was  4.49 #> The degrees of freedom for the model are 12  and the objective function was  0.02  #>  #> The root mean square of the residuals (RMSR) is  0.01  #> The df corrected root mean square of the residuals is  0.01  #>  #> Fit based upon off diagonal values = 1 #> Measures of factor score adequacy              #>                                                    PA3  PA2   PA1 #> Correlation of (regression) scores with factors   0.87 0.92  0.64 #> Multiple R square of scores with factors          0.76 0.85  0.42 #> Minimum correlation of possible factor scores     0.53 0.70 -0.17"},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Export (dump) lavaan results — export_lavaan_results","title":"Export (dump) lavaan results — export_lavaan_results","text":"Export (dump) lavaan results","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export (dump) lavaan results — export_lavaan_results","text":"","code":"export_lavaan_results(   lavaan_model_fit,   path_name = \"lavaan_summary.txt\",   preamble = NULL,   ... )"},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export (dump) lavaan results — export_lavaan_results","text":"lavaan_model_fit Lavaan object. Lavaan object fitted ESEM model, usually obtained lavaan::cfa(). path_name Character vector. Path directing save text file results. must end desired file name desired text file extension. default save file current directory file name \"lavaan_summary.txt\". preamble Character vector. Allows user add text results report. Useful identify analysis, add information data etc. ... parameter = value pairs. Additional modifiers lavaan::summary() call. See full list available modifiers (lavaan-class).","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export (dump) lavaan results — export_lavaan_results","text":"Message confirming data dump. Saves data text file side-effect.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export (dump) lavaan results — export_lavaan_results","text":"Runs lavaan::summary() lavaan_model_fit modifiers std = TRUE fit.measures = TRUE dumps result text file. user option add text preamble results description. also possible add information exported results including modifiers summary call ... named values (e.g. rsquare = TRUE include r-squared measures), see (lavaan-class) full list available modifiers. path_name directories must separated \"\\\" (even Windows).","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/export_lavaan_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export (dump) lavaan results — export_lavaan_results","text":"","code":"HS.model <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit <- lavaan::cfa(HS.model, data= lavaan::HolzingerSwineford1939, std.lv = TRUE)  export_lavaan_results(fit) #> Lavaan summary saved successfully to /tmp/RtmpeYP9EF/file2a7d16f3f739/reference/lavaan_summary.txt # name the analysis with preamble export_lavaan_results(fit, path_name = \"titled_lavaan_summary.txt\", preamble = \"CLASSIC HOLZINGER SWINEFORD CFA MODEL\") #> Lavaan summary saved successfully to /tmp/RtmpeYP9EF/file2a7d16f3f739/reference/titled_lavaan_summary.txt # add r-squared measure to the exported results export_lavaan_results(fit, path = \"lavaan_summary_rsquared.txt\", rsquare = TRUE) #> Lavaan summary saved successfully to /tmp/RtmpeYP9EF/file2a7d16f3f739/reference/lavaan_summary_rsquared.txt"},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically find referent items for ESEM — find_referents","title":"Automatically find referent items for ESEM — find_referents","text":"Automatically find referent items ESEM","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically find referent items for ESEM — find_referents","text":"","code":"find_referents(efa_object, factor_names)"},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically find referent items for ESEM — find_referents","text":"efa_object psych::fa() object results exploratory factor analysis. Referents selected based factor loadings solution. factor_names Character vector. names identify factors efa_object. must order appear efa_object.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically find referent items for ESEM — find_referents","text":"named list format c(FactorName = referent), order given factor names.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically find referent items for ESEM — find_referents","text":"Given exploratory factor analysis results, function finds referent item factor outputs list used syntax_composer. automatic selection currently choose referents recommended approach literature, , items load heavily one factor lightly others. current implementation, items chosen solely based highest loadings. may lead less ideal referent selection situations. recommended always compare resulting  referents items one choose inspecting exploratory solution loadings (usually loadings(efa_object)). fact, user always check loadings(efa_object) calling function able specify factor_names correctly.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/find_referents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically find referent items for ESEM — find_referents","text":"","code":"# use Holzinger and Swineford (1939) dataset in lavaan package hw_data <- lavaan::HolzingerSwineford1939 hw_data <- hw_data[,c(7:15)]  #make exploratory analysis with geomin rotation geomin_efa <- esem_efa(hw_data,3)  # check the order of factors in the efa solution loadings(geomin_efa) #>  #> Loadings: #>    PA1    PA3    PA2    #> x1  0.193  0.595        #> x2         0.509 -0.124 #> x3         0.688        #> x4  0.845               #> x5  0.884               #> x6  0.804               #> x7        -0.137  0.731 #> x8         0.137  0.688 #> x9         0.391  0.455 #>  #>                  PA1   PA3   PA2 #> SS loadings    2.187 1.287 1.232 #> Proportion Var 0.243 0.143 0.137 #> Cumulative Var 0.243 0.386 0.523 #find referents with factors in the order checked above find_referents(geomin_efa, c(\"textual\", \"visual\", \"speed\")) #> $textual #> [1] \"x5\" #>  #> $visual #> [1] \"x3\" #>  #> $speed #> [1] \"x7\" #>  #In this particular case, automatic selection chooses #the same items one would choose manually. For comparison: loadings(geomin_efa) #>  #> Loadings: #>    PA1    PA3    PA2    #> x1  0.193  0.595        #> x2         0.509 -0.124 #> x3         0.688        #> x4  0.845               #> x5  0.884               #> x6  0.804               #> x7        -0.137  0.731 #> x8         0.137  0.688 #> x9         0.391  0.455 #>  #>                  PA1   PA3   PA2 #> SS loadings    2.187 1.287 1.232 #> Proportion Var 0.243 0.143 0.137 #> Cumulative Var 0.243 0.386 0.523"},{"path":"https://mateuspsi.github.io/esemComp/reference/fit_free_factor_var_esem.html","id":null,"dir":"Reference","previous_headings":"","what":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","title":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","text":"Model fitting free factor variance ESEM","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/fit_free_factor_var_esem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","text":"","code":"fit_free_factor_var_esem(model_syntax, data, ...)"},{"path":"https://mateuspsi.github.io/esemComp/reference/fit_free_factor_var_esem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","text":"model_syntax ESEM model fitting create syntax_composer() only_fix_crossloadings = FALSE. data Data.frame rows observations columns indicators. Alternatively, covariance matrix. covariance matrix, sample.nobs must included ... ... name = value pairs lavaan::lavaan().","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/fit_free_factor_var_esem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","text":"lavaan object fitted model.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/fit_free_factor_var_esem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model fitting for free factor variance ESEM — fit_free_factor_var_esem","text":"Lavaan's lavaan::cfa() function automatically fixes first indicator factors factor (residual) variances set free parameters std.lv = TRUE. present function wrapper around lavaan::lavaan() parameters cfa function, except factor variances set free additional fixing done. allows correct estimation ESEM-within-CFA models free factor variances, granted model syntax made syntax_composer() only_fix_crossloadings = FALSE thus includes correct number fixed parameters. See esem--efa vignette example.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Make target rotation matrix — make_target","title":"Make target rotation matrix — make_target","text":"Make target rotation matrix use esem_efa().","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make target rotation matrix — make_target","text":"","code":"make_target(nitems, mainloadings, bifactor = FALSE)"},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make target rotation matrix — make_target","text":"nitems integer. total number items. mainloadings list. list indicating indexes items related latent variable rotation matrix [nItems x nLatentVariables]. See examples. bifactor Logical. TRUE, adds G-factor column resulting target matrix.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make target rotation matrix — make_target","text":"Target matrix NAs zeros [nItems x nLatentVariables].","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make target rotation matrix — make_target","text":"target rotation matrix composed cells indicating loadings freely estimated close zero possible factor solution rotated. Freely estimated loadings represented NAs. mainloadings identify items free latent variable. See vignette esem efa suggestions use.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/make_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make target rotation matrix — make_target","text":"","code":"#target matrix for the Tucker dataset in the psych package main_loadings_list <- list(f1 = c(1,2,5:7),                            f2 = c(3,4,8,9)) make_target(9, main_loadings_list) #>       f1 f2 #>  [1,] NA  0 #>  [2,] NA  0 #>  [3,]  0 NA #>  [4,]  0 NA #>  [5,] NA  0 #>  [6,] NA  0 #>  [7,] NA  0 #>  [8,]  0 NA #>  [9,]  0 NA  #bifactor matrix for the same dataset make_target(9, main_loadings_list, TRUE) #>       f1 f2  G #>  [1,] NA  0 NA #>  [2,] NA  0 NA #>  [3,]  0 NA NA #>  [4,]  0 NA NA #>  [5,] NA  0 NA #>  [6,] NA  0 NA #>  [7,] NA  0 NA #>  [8,]  0 NA NA #>  [9,]  0 NA NA"},{"path":"https://mateuspsi.github.io/esemComp/reference/omega_esem.html","id":null,"dir":"Reference","previous_headings":"","what":"McDonald's Omega for ESEM — omega_esem","title":"McDonald's Omega for ESEM — omega_esem","text":"Calculates McDonald's omega using data inside Lavaan object fitted model. formula following: $$ \\omega = |\\sum{\\lambda_i}|^2 / |\\sum{\\lambda_i}|^2 + \\delta_i_i $$  \\(\\lambda_i\\) factor loadings \\(\\delta_i_i\\), error variances.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/omega_esem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"McDonald's Omega for ESEM — omega_esem","text":"","code":"omega_esem(esem_model_fit, target_matrix)"},{"path":"https://mateuspsi.github.io/esemComp/reference/omega_esem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"McDonald's Omega for ESEM — omega_esem","text":"esem_model_fit Lavaan object ESEM fitted model. target_matrix Target rotation matrix. Usually, used run esem_efa(). names factors matrix must exactly names fitted lavaan model.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/omega_esem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"McDonald's Omega for ESEM — omega_esem","text":"McDonald's Omega values factor.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/omega_esem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"McDonald's Omega for ESEM — omega_esem","text":"","code":"#use Tucker 9 cognitive variables cov matrix tucker <- psych::Tucker  # esem with oblique target rotation target_mat <- make_target(9, list(f1 = c(1,2,5:7), f2 = c(3,4,8,9))) tucker_esem_efa <- esem_efa(tucker,2,target_mat)  # fit lavaan model referents_list <- find_referents(tucker_esem_efa, c(\"f2\", \"f1\")) model_syntax <- syntax_composer(tucker_esem_efa, referents_list) fit <- lavaan::cfa(model_syntax, sample.cov = as.matrix(tucker), sample.nobs = 710)  # McDonald's Omega omega_esem(fit, target_mat) #>    f1    f2  #> 0.824 0.907"},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":null,"dir":"Reference","previous_headings":"","what":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"ESEM-within-CFA syntax composer lavaan","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"","code":"syntax_composer(efa_object, referents, only_fix_crossloadings = TRUE)"},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"efa_object psych::fa() object results exploratory factor analysis. factor loadings analysis set starting values fixed values lavaan syntax created. referents named list form list(factor1 = \"referent1\", etc). entry identifies referent one factors. order vector must order factors ordered efa_object.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"character vector lavaan syntax ESEM model.","code":""},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"ESEM-within-CFA models latent variables estimations cross-loadings. improve fit, starting values previous exploratory analysis used. ensure model identification, referent chosen latent variable cross-loadings set fixed values. function \"composes\" lavaan model syntax EFA object. model can subsequently used lavaan lavaan::cfa() lavaan::sem(). best way check output writeLines(). important make sure order referents vector factor order factor loadings matrix efa_object. Otherwise, names latent variables may wrong syntax. See also vignette esem-within-cfa.","code":""},{"path":[]},{"path":"https://mateuspsi.github.io/esemComp/reference/syntax_composer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESEM-within-CFA syntax composer for lavaan — syntax_composer","text":"","code":"# use Holzinger and Swineford (1939) dataset in lavaan package hw_data <- lavaan::HolzingerSwineford1939 hw_data <- hw_data[,c(7:15)]  #make exploratory analysis with geomin rotation geomin_efa <- esem_efa(hw_data,3) referents_list <- list(textual = \"x5\", visual = \"x3\", speed = \"x7\") model_syntax <- syntax_composer(geomin_efa, referents_list) writeLines(model_syntax) #> textual =~ start(0.193)*x1+ #> start(0.042)*x2+ #> -0.066*x3+ #> start(0.845)*x4+ #> start(0.884)*x5+ #> start(0.804)*x6+ #> 0.035*x7+ #> start(-0.044)*x8+ #> start(0.024)*x9  #>  #> visual =~ start(0.595)*x1+ #> start(0.509)*x2+ #> start(0.688)*x3+ #> start(0.02)*x4+ #> -0.061*x5+ #> start(0.083)*x6+ #> -0.137*x7+ #> start(0.137)*x8+ #> start(0.391)*x9  #>  #> speed =~ start(0.029)*x1+ #> start(-0.124)*x2+ #> 0.016*x3+ #> start(0.009)*x4+ #> 0.009*x5+ #> start(-0.011)*x6+ #> start(0.731)*x7+ #> start(0.688)*x8+ #> start(0.455)*x9  #>   # esem-within-cfa esem_w_cfa <- lavaan::cfa(model_syntax, data = hw_data, std.lv = TRUE) summary(esem_w_cfa) #> Length  Class   Mode  #>      1 lavaan     S4"}]
